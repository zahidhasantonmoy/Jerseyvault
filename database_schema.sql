-- Create the products table
CREATE TABLE products (
  id bigint generated by default as identity primary key,
  name text not null,
  description text,
  price numeric not null,
  image text,
  category text,
  sizes text[],
  colors text[],
  stock integer default 0
);

-- Create the profiles table
CREATE TABLE profiles (
  id uuid references auth.users on delete cascade primary key,
  username text unique,
  avatar_url text,
  website text,
  updated_at timestamp with time zone
);

-- Create the orders table
CREATE TABLE orders (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users on delete cascade,
  created_at timestamp with time zone default now(),
  total_amount numeric not null,
  status text default 'pending',
  shipping_address jsonb
);

-- Create the order_items table
CREATE TABLE order_items (
  id bigint generated by default as identity primary key,
  order_id bigint references orders on delete cascade,
  product_id bigint references products on delete cascade,
  quantity integer not null,
  price numeric not null
);

-- Create the wishlist table
CREATE TABLE wishlist (
  user_id uuid references auth.users on delete cascade,
  product_id bigint references products on delete cascade,
  created_at timestamp with time zone default now(),
  primary key (user_id, product_id)
);

-- Set up Row Level Security (RLS) for profiles table
ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Public profiles are viewable by everyone."
  ON profiles FOR SELECT
  USING (true);

CREATE POLICY "Users can insert their own profile."
  ON profiles FOR INSERT
  WITH CHECK (auth.uid() = id);

CREATE POLICY "Users can update their own profile."
  ON profiles FOR UPDATE
  USING (auth.uid() = id);

-- Set up Row Level Security (RLS) for orders table
ALTER TABLE orders ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view their own orders."
  ON orders FOR SELECT
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own orders."
  ON orders FOR INSERT
  WITH CHECK (auth.uid() = user_id);

-- Set up Row Level Security (RLS) for order_items table
ALTER TABLE order_items ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view their own order items."
  ON order_items FOR SELECT
  USING (EXISTS (SELECT 1 FROM orders WHERE orders.id = order_items.order_id AND orders.user_id = auth.uid()));

CREATE POLICY "Users can insert their own order items."
  ON order_items FOR INSERT
  WITH CHECK (EXISTS (SELECT 1 FROM orders WHERE orders.id = order_items.order_id AND orders.user_id = auth.uid()));

-- Set up Row Level Security (RLS) for wishlist table
ALTER TABLE wishlist ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view their own wishlist items."
  ON wishlist FOR SELECT
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own wishlist items."
  ON wishlist FOR INSERT
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can delete their own wishlist items."
  ON wishlist FOR DELETE
  USING (auth.uid() = user_id);
